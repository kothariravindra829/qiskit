#                                       QISKIT
                                      
###                                     Qiskit= Quantum information source kit
                                      

### Here is the starting of the coding part of the qiskit basics gates and its template of the basics changing at one positon of quantum gate you can feel the changing of the qubits.

### import the neccessory tools

%%capture
%pip install qiskit
%pip install pylatexenc
%pip install qiskit-aer

# import the library

from the qiskit tools toolbox import the 

q = QuatnumRegister these indicates the qubit information stores 

c = ClassicalRegister these will shows us the measured qubit into bits 

qc = QuantumCircuit whhich is the combination of the QuantumRegister and ClassicalRegister



from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
q = QuantumRegister(1) # 1 qubit
c = ClassicalRegister(1)  # 1 classical bit store
qc = QuantumCircuit(q,c)  # quantumcirucit

### from matplotlib we are visulising the how the quantum cirucit looks like

It will show the one qubit and classical bit or classical register

qc.draw('mpl')

Here is the visualization of the statevector of the of the defined quantum circuit


for more refernce the click here :  https://docs.quantum.ibm.com/api/qiskit/qiskit.quantum_info.Statevector

from qiskit.quantum_info import Statevector

Everytime we initialized the ground state of the qubit i.e. ket zero

∣0⟩


psi1 = Statevector(qc)
psi1.draw('latex')

Plot the qsphere representation of a quantum state. 

Here, the size of the points is proportional to the probability of the corresponding term in the state and the color represents the phase.

for more reference : https://docs.quantum.ibm.com/api/qiskit/qiskit.visualization.plot_state_qsphere

from qiskit.visualization import plot_state_qsphere

plot_state_qsphere(qc)

Here we 

Initialize a density matrix object

It looks the matrix what we initialze the state of the qubit

2 by 2 matrix or more than that

from qiskit.quantum_info import DensityMatrix

rho1 = DensityMatrix(qc)
rho1.draw('latex',prefix='\\rho_1 = ')

Plot the cityscape of quantum state.

Plot two 3d bar graphs (two dimensional) of the real and imaginary part of the density matrix rho.

from qiskit.visualization import plot_state_city
plot_state_city(qc)

Plot a hinton diagram for the density matrix of a quantum state.


The hinton diagram represents the values of a matrix using squares, whose size indicate the magnitude of their corresponding value and their color, its sign. A white square means the value is positive and a black one means negative.

from qiskit.visualization import plot_state_hinton
plot_state_hinton(qc)

Plot the Pauli-vector representation of a quantum state as bar graph.

The Pauli-vector of a density matrix 
ρ is defined by the expectation of each possible tensor product of single-qubit Pauli operators (including the identity), that is

This function plots the coefficients 

$
\rho = \frac{1}{2^n} \sum_{\sigma \in \{I,X,Y,Z\} \otimes n} \text{Tr}(\sigma \rho) \sigma
$


This function plots the coefficients 
$\text{Tr}(\sigma \rho) \sigma$


Tr(σρ) as bar graph.

from qiskit.visualization import plot_state_paulivec
plot_state_paulivec(qc,title='Initial Density Matrix as linear combination of Pauli gates')

from qiskit.visualization import plot_bloch_multivector
plot_bloch_multivector(qc)

Complex Number Visualization

purity = rho1.purity()
print(purity)

With changing the quantum gates initialize the name of quantum gate like x,y,z,cnot,etc.,

qc.i(q[0])

qc.draw('mpl')

psi2 = Statevector(qc)
psi2.draw('latex')

plot_state_qsphere(qc)

rho2 = DensityMatrix(qc)
rho2.draw('latex',prefix='\\rho_2=')

plot_state_city(qc)

plot_state_hinton(qc)

plot_state_paulivec(qc, title = 'Density matrix of the final state as linear combination of Pauli Gates')

plot_bloch_multivector(qc)

purityf = rho2.purity()
print(purityf)

from qiskit.quantum_info import state_fidelity

fidelity = state_fidelity(psi1,psi2)
print(fidelity)

fidelity = state_fidelity(rho1,rho2)
print(fidelity)

qc.measure(q[0],c[0])

qc.draw('mpl')

from qiskit import transpile
from qiskit.providers.aer import QasmSimulator
backend = QasmSimulator()
qc_compiled = transpile(qc,backend)
job = backend.run(qc_compiled,shots = 1024)
result = job.result()
counts = result.get_counts()
print(counts)

from qiskit.visualization import plot_histogram
plot_histogram(counts)

