%%capture
%pip install qiskit
%pip install pylatexenc
%pip install qiskit-aer

from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
q = QuantumRegister(1) # 1 qubit
c = ClassicalRegister(1)  # 1 classical bit store
qc = QuantumCircuit(q,c)  # quantumcirucit

qc.draw('mpl')

from qiskit.quantum_info import Statevector
psi1 = Statevector(qc)
psi1.draw('latex')

from qiskit.visualization import plot_state_qsphere
plot_state_qsphere(qc)


from qiskit.quantum_info import DensityMatrix
rho1 = DensityMatrix(qc)
rho1.draw('latex',prefix='\\rho_1 = ')

from qiskit.visualization import plot_state_city
plot_state_city(qc)

from qiskit.visualization import plot_state_hinton
plot_state_hinton(qc)

from qiskit.visualization import plot_state_paulivec
plot_state_paulivec(qc,title='Initial Density Matrix as linear combination of Pauli gates')

from qiskit.visualization import plot_bloch_multivector
plot_bloch_multivector(qc)

purity = rho1.purity()
print(purity)

#different gates can be replaced here: x, y, z cnot, etc.,
qc.i(q[0])

qc.draw('mpl')

psi2 = Statevector(qc)
psi2.draw('latex')

plot_state_qsphere(qc)

rho2 = DensityMatrix(qc)
rho2.draw('latex',prefix='\\rho_2=')

plot_state_city(qc)

plot_state_hinton(qc)

plot_state_paulivec(qc, title = 'Density matrix of the final state as linear combination of Pauli Gates')

plot_bloch_multivector(qc)

purityf = rho2.purity()
print(purityf)

from qiskit.quantum_info import state_fidelity

fidelity = state_fidelity(psi1,psi2)
print(fidelity)

fidelity = state_fidelity(rho1,rho2)
print(fidelity)

qc.measure(q[0],c[0])

qc.draw('mpl')

from qiskit import transpile
from qiskit.providers.aer import QasmSimulator
backend = QasmSimulator()
qc_compiled = transpile(qc,backend)
job = backend.run(qc_compiled,shots = 1024)
result = job.result()
counts = result.get_counts()
print(counts)

from qiskit.visualization import plot_histogram
plot_histogram(counts)
